// <auto-generated />
using System;
using BaseBackEnd.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseBackEnd.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ProjectBaseContext))]
    [Migration("20210326194025_security_insert_data_functionality_and_module")]
    partial class security_insert_data_functionality_and_module
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of Department. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.HasIndex(new[] { "Name" }, "UN_Department_Name")
                        .IsUnique();

                    b.ToTable("Department");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Functionality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of Functionality. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.HasIndex(new[] { "Name" }, "UN_Functionality_Name")
                        .IsUnique();

                    b.ToTable("Functionality");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07928efb-aa9f-43a3-bafa-63064fd9055d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Approved",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Aprove",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ca768f52-ccd1-4fd8-973d-727850d2daba"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Disapproved",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Disapprove",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b0f20abf-6851-491e-9137-8ff5043ea178"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Active",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Activate",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("96641af5-e11e-48b1-95b1-e69ee18efc4d"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Inactive",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Inactivate",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0e391308-71ff-4693-9373-4261be70fd13"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Confirmed",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Confirm",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("76158192-c19b-40b8-9321-6f4103fd9df1"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Change status to Canceled",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Cancel",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("74c167a4-9795-40be-9cbd-147a674a8084"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits search",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Search",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("32106069-dd0d-43bb-a06a-f1619070147c"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits export",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Export",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9288ce53-9b23-44f5-97fd-1c9826bcff0c"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits add",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Add",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7607b464-dc1d-4d6a-8c68-9896e9219d0e"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits update",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Update",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7ac17f35-27e8-4a06-ad5d-fe794b3505ed"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits remove",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Remove",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b864ae65-dde8-41ca-9a37-9eb216d50108"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Permits consults, but not updates",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Consult",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of Module. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.HasIndex(new[] { "Name" }, "UN_Module_Name")
                        .IsUnique();

                    b.ToTable("Module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0774f5e2-390d-456e-a56e-f9b434d52d07"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Security module",
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Security",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePage", b =>
                {
                    b.Property<Guid>("IdModule")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of ModulePage. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("IdModule", "IdPage");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("IdPage");

                    b.HasIndex("Status");

                    b.ToTable("ModulePage");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePageFunctionality", b =>
                {
                    b.Property<Guid>("IdModulePage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdFunctionality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of ModulePageFunctionality. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("IdModulePage", "IdPage", "IdFunctionality");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdFunctionality");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.ToTable("ModulePageFunctionality");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of Page. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of Profile. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.HasIndex(new[] { "Name" }, "UN_Profile__Name")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ProfileModulePageFunctionality", b =>
                {
                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdModule")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdFunctionality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of ProfileModulePageFunctionality. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("IdProfile", "IdModule", "IdPage", "IdFunctionality");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("Status");

                    b.HasIndex("IdModule", "IdPage", "IdFunctionality");

                    b.ToTable("ProfileModulePageFunctionality");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("KeepConected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(NEWID())");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())")
                        .HasComment("Creation Date");

                    b.Property<Guid>("IdCreationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCreationUser");

                    b.Property<Guid>("IdDepartment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdLastModificationUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdLastModificationUser");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificationDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(GETDATE())");

                    b.Property<string>("Login")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(1)))")
                        .HasComment("Status of User. Inactive = 0, Active=1, Blocked = 2, Deleted = 3");

                    b.HasKey("Id");

                    b.HasIndex("IdCreationUser");

                    b.HasIndex("IdDepartment");

                    b.HasIndex("IdLastModificationUser");

                    b.HasIndex("IdProfile");

                    b.HasIndex("Status");

                    b.HasIndex(new[] { "Login" }, "UN_User_Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdCreationUser = new Guid("00000000-0000-0000-0000-000000000001"),
                            IdDepartment = new Guid("00000000-0000-0000-0000-000000000001"),
                            IdProfile = new Guid("00000000-0000-0000-0000-000000000001"),
                            Login = "dev",
                            Password = "123",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BaseBackEnd.Infrastructure.Data.Context.DatabaseFunctions.DbFuncs", b =>
                {
                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewId")
                        .HasColumnType("uniqueidentifier");

                    b
                        .HasAnnotation("Relational:SqlQuery", "SELECT GETDATE() AS DateTime, NEWID() as NewId");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Department", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_Department_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_Department_Last_Modification_User");

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Functionality", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_Functionality_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_Functionality_Last_Modification_User");

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Module", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_Module_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_Module_Last_Modification_User");

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePage", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_ModulePage_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_ModulePage_Last_Modification_User");

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Module", "Module")
                        .WithMany("ModulePages")
                        .HasForeignKey("IdModule")
                        .HasConstraintName("FK_ModulePage__Module")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Page", "Page")
                        .WithMany("ModulePages")
                        .HasForeignKey("IdPage")
                        .HasConstraintName("FK_ModulePage__Page")
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");

                    b.Navigation("Module");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePageFunctionality", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_ModulePageFunctionality_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Functionality", "Functionality")
                        .WithMany("ModulePageFunctionalities")
                        .HasForeignKey("IdFunctionality")
                        .HasConstraintName("FK_ModulePageFunctionality__Functionality")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_ModulePageFunctionality_Last_Modification_User");

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.ModulePage", "ModulePage")
                        .WithMany("ModulePageFunctionalities")
                        .HasForeignKey("IdModulePage", "IdPage")
                        .HasConstraintName("FK_ModulePageFunctionality__Module_Page")
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("Functionality");

                    b.Navigation("LastModificationUser");

                    b.Navigation("ModulePage");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Page", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_Page_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_Page_Last_Modification_User");

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Profile", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Department", null)
                        .WithMany("Profiles")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_Profile_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_Profile_Last_Modification_User");

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ProfileModulePageFunctionality", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_ProfileModulePageFunctionality_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_ProfileModulePageFunctionality_Last_Modification_User");

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Profile", "Profile")
                        .WithMany("ProfileModulePageFunctionalities")
                        .HasForeignKey("IdProfile")
                        .HasConstraintName("FK_ProfileModulePageFunctionality_Profile")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.ModulePageFunctionality", "ModulePageFunctionality")
                        .WithMany("ProfileModulePageFunctionalities")
                        .HasForeignKey("IdModule", "IdPage", "IdFunctionality")
                        .HasConstraintName("FK_ProfileModulePageFunctionality__ModulePageFunctionality")
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("LastModificationUser");

                    b.Navigation("ModulePageFunctionality");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Session", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_$Session__User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.User", b =>
                {
                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "CreationUser")
                        .WithMany()
                        .HasForeignKey("IdCreationUser")
                        .HasConstraintName("FK_User_Creation_User")
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("IdDepartment")
                        .HasConstraintName("FK_User_Department")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.User", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("IdLastModificationUser")
                        .HasConstraintName("FK_User_Last_Modification_User");

                    b.HasOne("BaseBackEnd.Domain.Entities.Security.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("IdProfile")
                        .HasConstraintName("FK_User_Profile")
                        .IsRequired();

                    b.Navigation("CreationUser");

                    b.Navigation("Department");

                    b.Navigation("LastModificationUser");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Department", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Functionality", b =>
                {
                    b.Navigation("ModulePageFunctionalities");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Module", b =>
                {
                    b.Navigation("ModulePages");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePage", b =>
                {
                    b.Navigation("ModulePageFunctionalities");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.ModulePageFunctionality", b =>
                {
                    b.Navigation("ProfileModulePageFunctionalities");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Page", b =>
                {
                    b.Navigation("ModulePages");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.Profile", b =>
                {
                    b.Navigation("ProfileModulePageFunctionalities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BaseBackEnd.Domain.Entities.Security.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
